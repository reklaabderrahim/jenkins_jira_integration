Set<String> issueIdentifiers = new TreeSet<>()
def issues = "Initial"
def fixVersion = 'Initial value'

pipeline {
    agent any
     parameters {
        string(name: 'fixVersion', defaultValue: '', description: 'GxxRxxCxx')
    }
    stages {
        stage('Fetch commit keys') {
            steps {
                script {
                    def changelogContext = gitChangelog from: [type: 'REF', value: 'G02R02C02'], returnType: 'CONTEXT'
                    changelogContext.issues.each { issue ->
                      issueIdentifiers.add(issue.issue)
                    }

                }
            }
        }

        stage('search Jira Issues') {
            steps {
                script {
                    def issueskey = issueIdentifiers.join(',')
                    searchResults = jiraJqlSearch jql: "project = JKI AND issuekey in (${issueskey})", site: 'Jira Site', failOnError: false
                    issues = searchResults.data.issues
                }
            }
        }

        stage('create Fix Version') {
            steps {
                script {
                    newFixVersion = jiraNewVersion version: [name: "${params.fixVersion}", project: "JKI"], site: 'Jira Site'
                }
            }
        }

        stage('append the fix version') {
            steps {
                script {
                    for (i = 0; i < issues.size(); i++) {
                      def result = jiraGetIssue idOrKey: issues[i].key, site: 'Jira Site'
                      def fixVersions = result.data.fields.fixVersions << newFixVersion.data
                      def testIssue = [fields: [fixVersions: fixVersions]]
                      response = jiraEditIssue idOrKey: issues[i].key, issue: testIssue, site: 'Jira Site'
                    }
                }
            }
        }

        stage('update issue status') {
            steps {
                script {
                    for (i = 0; i < issues.size(); i++) {
                        if (issues[i].fields.issuetype.name == "Story" && issues[i].fields.status.name == "In Progress") {
                            // in review 281
                            def transitionInput = [ transition: [ id: 31] ]
                            jiraTransitionIssue idOrKey: issues[i].key, input: transitionInput, site: 'Jira Site'
                        } else if (issues[i].fields.issuetype.name == "Bug" && issues[i].fields.status.name == "In Progress") {
                            // ready for test 101
                            def transitionInput = [ transition: [ id: 31] ]
                            jiraTransitionIssue idOrKey: issues[i].key, input: transitionInput, site: 'Jira Site'
                        } else if (issues[i].fields.issuetype.name == "Technical Story" && issues[i].fields.status.name == "In Progress") {
                            // done 21
                            def transitionInput = [ transition: [ id: 31] ]
                            jiraTransitionIssue idOrKey: issues[i].key, input: transitionInput, site: 'Jira Site'
                        }
                    }
                }
            }
        }
    }
}
